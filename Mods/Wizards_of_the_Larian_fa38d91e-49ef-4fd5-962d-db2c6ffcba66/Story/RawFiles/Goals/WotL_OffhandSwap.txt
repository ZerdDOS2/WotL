Version 1
SubGoalCombiner SGC_AND
INITSECTION

KBSECTION
//REGION Wand Offhand Swapper
// This forces wands to be wielded in the offhand on the equip event
IF
	ItemEquipped(_Item, _Char)
AND
	QRY_WotL_FindWeaponSlot(_Char, _Item)
AND
	DB_WotL_WeaponSlotFound(_Char, _Item, _Slot)
THEN
	NOT DB_WotL_WeaponSlotFound(_Char, _Item, _Slot);
	PROC_WotL_SwapWeapons(_Char, _Item, _Slot);

// Checks if the equipped item went to the mainhand slot, then saves it in a DB
QRY
	QRY_WotL_FindWeaponSlot((CHARACTERGUID)_Char, (ITEMGUID)_Item)
AND
	CharacterGetEquippedItem(_Char, "Weapon", _Item)
THEN
	DB_WotL_WeaponSlotFound(_Char, _Item, "Weapon");

// Check if the equipped item went to the offhand slot and it's not a shield, then saves it in a DB
QRY
	QRY_WotL_FindWeaponSlot((CHARACTERGUID)_Char, (ITEMGUID)_Item)
AND
	CharacterGetEquippedItem(_Char, "Shield", _Item)
AND
	NRD_ItemGetStatsId(_Item, _StatsId)
AND
	NRD_StatGetType(_StatsId, "Weapon")
THEN
	DB_WotL_WeaponSlotFound(_Char, _Item, "Shield");

// Swap weapons if the item in the mainhand slot is a wand and the offhand slot isn't a wand nor a shield
PROC
	PROC_WotL_SwapWeapons((CHARACTERGUID)_Char, (ITEMGUID)_Wand, "Weapon")
AND
	NRD_ItemGetStatsId(_Wand, _WandId)
AND
	NRD_StatGetString(_WandId, "WeaponType", "Wand")
AND
	CharacterGetEquippedItem(_Char, "Shield", (ITEMGUID)_NotWand)
AND
	NRD_ItemGetStatsId(_NotWand, _NotWandId)
AND
	NRD_StatGetType(_NotWandId, "Weapon")
AND
	NOT NRD_StatGetString(_NotWandId, "WeaponType", "Wand")
THEN
	DB_WotL_SwapWeapons(_Char, _NotWand, _Wand);
	CharacterUnequipItem(_Char, _Wand);
	CharacterUnequipItem(_Char, _NotWand);
	ProcObjectTimer(_Char, "WotL_SwapWeapons", 100);

// Swap weapons if the item in the offhand slot is a wand and the mainhand slot isn't
PROC
	PROC_WotL_SwapWeapons((CHARACTERGUID)_Char, (ITEMGUID)_NotWand, "Shield")
AND
	NRD_ItemGetStatsId(_NotWand, _NotWandId)
AND
	NRD_StatGetType(_NotWandId, "Weapon")
AND
	NOT NRD_StatGetString(_NotWandId, "WeaponType", "Wand")
AND
	CharacterGetEquippedItem(_Char, "Weapon", (ITEMGUID)_Wand)
AND
	NRD_ItemGetStatsId(_Wand, _WandId)
AND
	NRD_StatGetString(_WandId, "WeaponType", "Wand")
THEN
	DB_WotL_SwapWeapons(_Char, _NotWand, _Wand);
	CharacterUnequipItem(_Char, _Wand);
	CharacterUnequipItem(_Char, _NotWand);
	ProcObjectTimer(_Char, "WotL_SwapWeapons", 100);

// Using the DB on PROC_WotL_SwapWeapons, equips the mainhand weapon first, then the offhand weapon
PROC
	ProcObjectTimerFinished((CHARACTERGUID)_Char, "WotL_SwapWeapons")
AND
	DB_WotL_SwapWeapons(_Char, _MainHand, _)
THEN
	CharacterEquipItem(_Char, _MainHand);
	ProcObjectTimer(_Char, "WotL_SwapWeaponsOffhand", 50);

PROC
	ProcObjectTimerFinished((CHARACTERGUID)_Char, "WotL_SwapWeapons")
AND
	DB_WotL_SwapWeapons(_Char, _MainHand, _OffHand)
THEN
	CharacterEquipItem(_Char, _OffHand);
	NOT DB_WotL_SwapWeapons(_Char, _MainHand, _OffHand);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "__WotL_Goal"
